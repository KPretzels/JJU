# -*- coding: utf-8 -*-
"""04-앙상블.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a-bWkTZ18p1RSYa4msdukeeYR-2-hYd0

`BM25Retriever`와 `FAISS` 검색기를 결합
* BM25 : 키워드 유사도
* FAISS : 의미기반 유사도
"""

!pip install -qU langchain_openai langchain_community rank_bm25 faiss-cpu

# 샘플 문서 리스트
doc_list = [
    "I like apples",
    "I like apple company",
    "I like apple's iphone",
    "Apple is my favorite company",
    "I like apple's ipad",
    "I like apple's macbook",
]

from langchain.retrievers import BM25Retriever, EnsembleRetriever
from langchain.vectorstores import FAISS
from langchain_openai import OpenAIEmbeddings

bm25_retriever = BM25Retriever.from_texts(doc_list)

bm25_retriever.k = 1 # 검색 결과 개수를 1로 설정

embedding = OpenAIEmbeddings()
faiss_retriever = FAISS.from_texts(doc_list, embedding)

faiss_retriever = faiss_retriever.as_retriever(search_kwargs={"k": 1})

# 앙상블 retriever를 초기화합니다
ensemble_retriever = EnsembleRetriever(
    retrievers = [bm25_retriever, faiss_retriever],
    weights = [0.3, 0.7]
)

query ="my favorite company"

# 앙상블 리트리버 사용 결과
ensemble_result = ensemble_retriever.get_relevant_documents(query)
print(ensemble_result)

# keyword search 단어기반
bm25_result = bm25_retriever.invoke(query)
print(bm25_result)

# semilarity search 의미 기반
faiss_result = faiss_retriever.invoke(query)
print(faiss_result)

# 가져온 문서를 출력합니다.
print("[Ensemble Retriever]")
for doc in ensemble_result:
    print(f"Content: {doc.page_content}")
    print()

print("[BM25 Retriever]")
for doc in bm25_result:
    print(f"Content: {doc.page_content}")
    print()

print("[FAISS Retriever]")
for doc in faiss_result:
    print(f"Content: {doc.page_content}")
    print()

from langchain_core.runnables import ConfigurableField


ensemble_retriever = EnsembleRetriever(
    # 리트리버 목록을 설정합니다. 여기서는 bm25_retriever와 faiss_retriever를 사용합니다.
    retrievers=[bm25_retriever, faiss_retriever],
).configurable_fields(
    weights=ConfigurableField(
        # 검색 매개변수의 고유 식별자를 설정합니다.
        id="ensemble_weights",
        # 검색 매개변수의 이름을 설정합니다.
        name="Ensemble Weights",
        # 검색 매개변수에 대한 설명을 작성합니다.
        description="Ensemble Weights",
    )
)

config_1 = {"configurable": {"ensemble_weights": [1, 0]}}

# config 매개변수를 사용하여 검색 설정을 지정합니다.
docs1 = ensemble_retriever.invoke("my favorite fruit is apple", config=config_1)
docs1  # 검색 결과인 docs를 출력합니다.

config_2 = {"configurable": {"ensemble_weights": [0, 1]}}

# config 매개변수를 사용하여 검색 설정을 지정합니다.
docs2 = ensemble_retriever.invoke("my favorite fruit is apple", config=config_2)
docs2  # 검색 결과인 docs를 출력합니다.

