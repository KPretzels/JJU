{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "window = tk.Tk()\n",
    "window.title('계산기')\n",
    "window.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "disValue = 0\n",
    "operator = {'+':1, '-':2, '/':3, '*':4, 'C':5, '=':6}\n",
    "stoValue = 0\n",
    "opPre = 0\n",
    "\n",
    "### 0~9까지의 숫자를 클릭했을때\n",
    "def number_click(value):\n",
    "    # print('숫자 ',value)\n",
    "    global disValue\n",
    "    \n",
    "    disValue = (disValue*10) + value #숫자를 클릭할때마다 10의 자리씩 이동한다.\n",
    "    str_value.set(disValue)          #화면에 숫자를 나타낸다.\n",
    "    \n",
    "### C를 클릭하여 clear할때\n",
    "def clear():\n",
    "    global disValue, stoValue, opPre\n",
    "    #주요 변수 초기화\n",
    "    stoValue = 0\n",
    "    opPre = 0\n",
    "    disValue = 0\n",
    "    str_value.set(str(disValue)) #화면을 지운다.\n",
    "\n",
    "### + ~ = 연산자를 클릭했을때\n",
    "def oprator_click(value):\n",
    "    # print('명령 ', value)\n",
    "    global disValue, operator, stoValue, opPre\n",
    "    \n",
    "    \n",
    "    op = operator[value] \n",
    "    \n",
    "    if op == 5:              \n",
    "        clear()\n",
    "    elif disValue == 0:      \n",
    "        opPre = 0\n",
    "    elif opPre == 0:         \n",
    "        opPre = op           \n",
    "        stoValue = disValue  \n",
    "        disValue = 0         \n",
    "        str_value.set(str(disValue)) \n",
    "    elif op == 6:             \n",
    "        if opPre == 1: \n",
    "            disValue = stoValue + disValue\n",
    "        if opPre == 2: \n",
    "            disValue = stoValue - disValue\n",
    "        if opPre == 3: \n",
    "            disValue = stoValue / disValue\n",
    "        if opPre == 4: \n",
    "            disValue = stoValue * disValue\n",
    "        \n",
    "        str_value.set(str(disValue)) \n",
    "        disValue = 0\n",
    "        stoValue = 0\n",
    "        opPre = 0\n",
    "    else:\n",
    "        clear()\n",
    "\n",
    "def button_click(value):\n",
    "    # print(value)\n",
    "    try:\n",
    "        value = int(value)      \n",
    "        \n",
    "        \n",
    "        number_click(value)     \n",
    "    except:\n",
    "        oprator_click(value)    \n",
    "        \n",
    "win = tk.Tk()\n",
    "win.title('계산시')\n",
    "\n",
    "str_value = tk.StringVar()\n",
    "str_value.set(str(disValue))\n",
    "dis = tk.Entry(win, textvariable=str_value, justify='right', bg = 'white',fg='red')\n",
    "dis.grid(column=0, row=0, columnspan=4, ipadx=80, ipady=30)\n",
    "\n",
    "calItem = [['1','2','3','4'],\n",
    "           ['5', '6', '7', '8'],\n",
    "           ['9', '0', '+', '-'],\n",
    "           ['/', '*', 'C', '=']]\n",
    "\n",
    "for i,items in enumerate(calItem):\n",
    "    for k,item in enumerate(items):\n",
    "        try:\n",
    "            color = int(item)\n",
    "            color = 'black'\n",
    "        except:\n",
    "            color = 'green'\n",
    "        bt = tk.Button(win, \n",
    "            text=item, \n",
    "            width=10, \n",
    "            height=5,\n",
    "            bg=color,\n",
    "            fg = 'white',\n",
    "            command = lambda cmd=item: button_click(cmd)\n",
    "            )\n",
    "        bt.grid(column=k, row=(i+1))\n",
    "\n",
    "win.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
