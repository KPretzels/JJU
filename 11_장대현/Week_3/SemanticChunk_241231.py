# -*- coding: utf-8 -*-
"""07_04_SemanticChunk.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yjyFwhovlTr1IwTE-RnqotLCuZhq6u3G
"""

pip install -qU langchain_experimental

from google.colab import drive
drive.mount('/content/drive')

!pip install -q langchain_openai

from langchain_experimental.text_splitter import SemanticChunker
from langchain_openai.embeddings import OpenAIEmbeddings

text_splitter = SemanticChunker(
                OpenAIEmbeddings(api_key =OPEN_API_KEY),
                breakpoint_threshold_type = "percentile",
                breakpoint_threshold_amount = 70,
                                )

with open("/content/appendix-keywords.txt") as f:
  file = f.read()

chunks = text_splitter.split_text(file)

print(file[:500])

print(chunks[0])

print(chunks[2])

text_splitter = SemanticChunker(
    OpenAIEmbeddings(api_key = OPEN_API_KEY),
    breakpoint_threshold_type = "interquartile",
    breakpoint_threshold_amount = 0.5,
)

docs = text_splitter.create_documents([file])
for i, doc in enumerate(docs[:5]):
    print(f"[Chunk {i}]", end="\n\n")
    print(doc.page_content)  # 분할된 문서 중 첫 번째 문서의 내용을 출력합니다.
    print("===" * 20)

text_splitter = SemanticChunker(
    OpenAIEmbeddings(api_key = OPEN_API_KEY),
    # 분할 기준으로 표준 편차를 사용합니다.
    breakpoint_threshold_type="standard_deviation",
    breakpoint_threshold_amount=1.25,
)

# text_splitter를 사용하여 분할합니다.
docs = text_splitter.create_documents([file])

docs = text_splitter.create_documents([file])
for i, doc in enumerate(docs[:5]):
    print(f"[Chunk {i}]", end="\n\n")
    print(doc.page_content)  # 분할된 문서 중 첫 번째 문서의 내용을 출력합니다.
    print("===" * 20)

text_splitter = SemanticChunker(
    OpenAIEmbeddings(api_key = OPEN_API_KEY),
    # 분할 기준점 임계값 유형을 사분위수 범위로 설정합니다.
    breakpoint_threshold_type="interquartile",
    breakpoint_threshold_amount=0.5,
)

# text_splitter를 사용하여 분할합니다.
docs = text_splitter.create_documents([file])

# 결과를 출력합니다.
for i, doc in enumerate(docs[:5]):
    print(f"[Chunk {i}]", end="\n\n")
    print(doc.page_content)  # 분할된 문서 중 첫 번째 문서의 내용을 출력합니다.
    print("===" * 20)

print(len(docs))  # docs의 길이를 출력합니다.