# -*- coding: utf-8 -*-
"""03-04_JsonOutputParser.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EPh7lgKYOyzIWdOF5cYJhN7jo5KUqJF2
"""

import os

os.environ["OPENAI_API_KEY"] = "api-key"
os.environ["LANGCHAIN_API_KEY"] = "api-key"
os.environ["LANGCHAIN_TRACING_V2"] = "true"
os.environ["LANGCHAIN_ENDPOINT"] = "http://api.smith.langchain.com"
os.environ["LANGCHAINPROJECT"] = "03-02-03"

!pip install langchain_openai

from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import JsonOutputParser
from langchain_openai import ChatOpenAI
from pydantic import BaseModel, Field

model = ChatOpenAI(temperature= 0, model_name="gpt-4o")

class Topic(BaseModel):
  description: str = Field(description="주제에 대한 간결한 설명")
  hashtags : str = Field(description="해시태그 형식의 키워드(2개 이상)")

parser = JsonOutputParser(pydantic_object=Topic)

from langchain.prompts import ChatPromptTemplate

# Prompt 정의
prompt = ChatPromptTemplate.from_messages([
    ("system", "당신은 친절한 AI 어시스턴스 입니다. 질문에 간결하게 답변하세요."),
    ("user", "#Format:{format_instructions}\n\nQuestion: {question}")
])
prompt = prompt.partial(format_instructions=parser.get_format_instructions())

chain = prompt | model | parser

question = "유튜브에 대해 설명해"
answer = chain.invoke({"question": question})

type(answer)

answer

question = "유튜브에 대해 설명해. 동영상에 대한 설명은 'description'에. 관련 키워드는 'hashtags'에 넣어주세요."

parser = JsonOutputParser()
prompt = ChatPromptTemplate.from_messages(
    [
    ("system", "당신은 친절한 AI 어시스턴스 입니다. 질문에 간결하게 답변하세요."),
    ("user", "#Format:{format_instructions}\n\nQuestion: {question}"),
    ]
)

prompt = prompt.partial(format_instructions=parser.get_format_instructions())
chain = prompt | model | parser
answer = chain.invoke({"question": question})

answer